{"version":3,"file":"textureSample.spec.js","names":["description","makeTestGroup","isDepthTextureFormat","isEncodableTextureFormat","kCompressedTextureFormats","kDepthStencilFormats","kEncodableTextureFormats","textureDimensionAndFormatCompatible","TextureTestMixin","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","kSamplePointMethods","doTextureCalls","checkCallResults","createTextureWithRandomDataAndGetTexels","generateSamplePointsCube","kCubeSamplePointMethods","chooseTextureSize","isPotentiallyFilterableAndFillable","skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable","getTextureTypeForTextureViewDimension","WGSLTextureSampleTest","isSupportedViewFormatCombo","generateTextureBuiltinInputs1D","kTestableColorFormats","g","test","specURL","desc","params","u","combine","filter","t","format","beginSubcases","beforeAllSubcases","fn","samplePoints","addressModeU","minFilter","size","minSize","minBlocks","viewDimension","descriptor","dimension","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","sampler","magFilter","calls","method","derivatives","hashInputs","map","coords","derivativeMult","builtin","coordType","viewDescriptor","textureType","results","res","expectOK","addressModeV","offset","width","height","mipLevelCount","mipmapFilter","addressModeW","isCompatibility","textureBindingViewDimension","A","depthOrArrayLayers","arrayIndex","num","type","arrayIndexType","skipIfTextureViewDimensionNotSupported","addressMode","combineWithParams","undefined","L"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSample.spec.ts"],"sourcesContent":["export const description = `\nSamples a texture.\n\n- TODO: test cube maps with more than 1 mip level.\n- TODO: test un-encodable formats.\n\nnote: uniformity validation is covered in src/webgpu/shader/validation/uniformity/uniformity.spec.ts\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  isDepthTextureFormat,\n  isEncodableTextureFormat,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  kEncodableTextureFormats,\n  textureDimensionAndFormatCompatible,\n} from '../../../../../format_info.js';\nimport { TextureTestMixin } from '../../../../../gpu_test.js';\n\nimport {\n  vec2,\n  vec3,\n  TextureCall,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  kSamplePointMethods,\n  doTextureCalls,\n  checkCallResults,\n  createTextureWithRandomDataAndGetTexels,\n  generateSamplePointsCube,\n  kCubeSamplePointMethods,\n  SamplePointMethods,\n  chooseTextureSize,\n  isPotentiallyFilterableAndFillable,\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable,\n  getTextureTypeForTextureViewDimension,\n  WGSLTextureSampleTest,\n  isSupportedViewFormatCombo,\n  vec1,\n  generateTextureBuiltinInputs1D,\n} from './texture_utils.js';\n\nconst kTestableColorFormats = [...kEncodableTextureFormats, ...kCompressedTextureFormats] as const;\n\nexport const g = makeTestGroup(TextureTestMixin(WGSLTextureSampleTest));\n\ng.test('sampled_1d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_1d<f32>, s: sampler, coords: f32) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => textureDimensionAndFormatCompatible('1d', t.format))\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('samplePoints', kSamplePointMethods)\n      .beginSubcases()\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const { format, samplePoints, addressModeU, minFilter } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 4, format, viewDimension: '1d' });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: '1d',\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      minFilter,\n      magFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec1>[] = generateTextureBuiltinInputs1D(50, {\n      sampler,\n      method: samplePoints,\n      descriptor,\n      derivatives: true,\n      hashInputs: [format, samplePoints, addressModeU, minFilter],\n    }).map(({ coords, derivativeMult }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n      };\n    });\n    const viewDescriptor = {};\n    const textureType = 'texture_1d<f32>';\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_2d<f32>, s: sampler, coords: vec2<f32>) -> vec4<f32>\nfn textureSample(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('samplePoints', kSamplePointMethods)\n      .beginSubcases()\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const { format, samplePoints, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      sampler,\n      method: samplePoints,\n      descriptor,\n      derivatives: true,\n      offset: true,\n      hashInputs: [format, samplePoints, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, derivativeMult, offset }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        offset,\n      };\n    });\n    const viewDescriptor = {};\n    const textureType = 'texture_2d<f32>';\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_3d<f32>, s: sampler, coords: vec3<f32>) -> vec4<f32>\nfn textureSample(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, offset: vec3<i32>) -> vec4<f32>\nfn textureSample(t: texture_cube<f32>, s: sampler, coords: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n\n* TODO: test 3d compressed textures formats. Just remove the filter below 'viewDimension'\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('viewDimension', ['3d', 'cube'] as const)\n      .filter(t => isSupportedViewFormatCombo(t.format, t.viewDimension))\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .filter(t => t.samplePoints !== 'cube-edges' || t.viewDimension !== '3d')\n      .beginSubcases()\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeW', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n      .filter(t => t.viewDimension !== 'cube' || t.offset !== true)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const {\n      format,\n      viewDimension,\n      samplePoints,\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      offset,\n    } = t.params;\n\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: viewDimension === '3d' ? '3d' : '2d',\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: test derivatives with cubemaps by just always setting this to 3.\n      mipLevelCount: viewDimension === '3d' ? 3 : 1,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const hashInputs = [\n      format,\n      viewDimension,\n      samplePoints,\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      offset,\n    ];\n    const calls: TextureCall<vec3>[] = (\n      viewDimension === '3d'\n        ? generateTextureBuiltinInputs3D(50, {\n            method: samplePoints as SamplePointMethods,\n            sampler,\n            descriptor,\n            derivatives: true,\n            hashInputs,\n          })\n        : generateSamplePointsCube(50, {\n            method: samplePoints,\n            sampler,\n            descriptor,\n            derivatives: true,\n            hashInputs,\n          })\n    ).map(({ coords, derivativeMult, offset }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        offset,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension)!;\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_depth_2d, s: sampler, coords: vec2<f32>) -> f32\nfn textureSample(t: texture_depth_2d, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .fn(async t => {\n    const { format, samplePoints, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      sampler,\n      method: samplePoints,\n      descriptor,\n      derivatives: true,\n      offset,\n      hashInputs: [format, samplePoints, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, derivativeMult, offset }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        offset,\n      };\n    });\n\n    const viewDescriptor = {};\n    const textureType = 'texture_depth_2d';\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nA is i32 or u32\n\nfn textureSample(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: A) -> vec4<f32>\nfn textureSample(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: A, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const { format, samplePoints, A, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const depthOrArrayLayers = 4;\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height, depthOrArrayLayers },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      derivatives: true,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      offset,\n      hashInputs: [format, samplePoints, A, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, derivativeMult, arrayIndex, offset }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        offset,\n      };\n    });\n    const textureType = 'texture_2d_array<f32>';\n    const viewDescriptor = {};\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nA is i32 or u32\n\nfn textureSample(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: A) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n  )\n  .beforeAllSubcases(t => {\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n  })\n  .fn(async t => {\n    const { format, samplePoints, A, addressMode, minFilter } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({\n      minSize: 32,\n      minBlocks: 4,\n      format,\n      viewDimension,\n    });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: test derivatives with cubemaps by setting this to 3.\n      mipLevelCount: 1,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      derivatives: true,\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      hashInputs: [format, viewDimension, A, samplePoints, addressMode, minFilter],\n    }).map(({ coords, derivativeMult, arrayIndex }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_depth_cube, s: sampler, coords: vec3<f32>) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .combineWithParams([\n        { viewDimension: 'cube' },\n        { viewDimension: 'cube-array', A: 'i32' },\n        { viewDimension: 'cube-array', A: 'u32' },\n      ] as const)\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureViewDimensionNotSupported(t.params.viewDimension);\n  })\n  .fn(async t => {\n    const { format, viewDimension, samplePoints, A, addressMode, minFilter } = t.params;\n\n    const size = chooseTextureSize({\n      minSize: 32,\n      minBlocks: 4,\n      format,\n      viewDimension,\n    });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: test derivatives with cubemaps by setting this to 3.\n      mipLevelCount: 1,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      derivatives: true,\n      arrayIndex: A ? { num: texture.depthOrArrayLayers / 6, type: A } : undefined,\n      hashInputs: [format, viewDimension, samplePoints, addressMode, minFilter],\n    }).map(({ coords, derivativeMult, arrayIndex }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        arrayIndex,\n        arrayIndexType: A ? (A === 'i32' ? 'i' : 'u') : undefined,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType =\n      viewDimension === 'cube' ? 'texture_depth_cube' : 'texture_depth_cube_array';\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nA is i32 or u32\n\nfn textureSample(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: A) -> f32\nfn textureSample(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: A, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('L', ['i32', 'u32'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .fn(async t => {\n    const { format, samplePoints, addressMode, minFilter, A, L, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n      ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      derivatives: true,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      offset,\n      hashInputs: [format, samplePoints, addressMode, minFilter, L, A, offset],\n    }).map(({ coords, derivativeMult, arrayIndex, offset }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        offset,\n      };\n    });\n    const textureType = 'texture_depth_2d_array';\n    const viewDescriptor: GPUTextureViewDescriptor = { dimension: '2d-array' };\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('depth_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nA is i32 or u32\n\nfn textureSample(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: A) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      // filter out stencil only formats\n      .filter(t => isDepthTextureFormat(t.format))\n      // MAINTENANCE_TODO: Remove when support for depth24plus, depth24plus-stencil8, and depth32float-stencil8 is added.\n      .filter(t => isEncodableTextureFormat(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('A', ['i32', 'u32'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n  })\n  .fn(async t => {\n    const { format, samplePoints, A, addressMode, minFilter } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({\n      minSize: 32,\n      minBlocks: 4,\n      format,\n      viewDimension,\n    });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: test derivatives with cubemaps by setting this to 3.\n      mipLevelCount: 1,\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      derivatives: true,\n      arrayIndex: A ? { num: texture.depthOrArrayLayers / 6, type: A } : undefined,\n      hashInputs: [format, viewDimension, samplePoints, addressMode, minFilter],\n    }).map(({ coords, derivativeMult, arrayIndex }) => {\n      return {\n        builtin: 'textureSample',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        arrayIndex,\n        arrayIndexType: A ? (A === 'i32' ? 'i' : 'u') : undefined,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = 'texture_depth_cube_array';\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n"],"mappings":";;GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,kDAAkD;AAChF;EACEC,oBAAoB;EACpBC,wBAAwB;EACxBC,yBAAyB;EACzBC,oBAAoB;EACpBC,wBAAwB;EACxBC,mCAAmC;AAC9B,+BAA+B;AACtC,SAASC,gBAAgB,QAAQ,4BAA4B;;AAE7D;;;;EAIEC,8BAA8B;EAC9BC,8BAA8B;EAC9BC,mBAAmB;EACnBC,cAAc;EACdC,gBAAgB;EAChBC,uCAAuC;EACvCC,wBAAwB;EACxBC,uBAAuB;;EAEvBC,iBAAiB;EACjBC,kCAAkC;EAClCC,0DAA0D;EAC1DC,qCAAqC;EACrCC,qBAAqB;EACrBC,0BAA0B;;EAE1BC,8BAA8B;AACzB,oBAAoB;;AAE3B,MAAMC,qBAAqB,GAAG,CAAC,GAAGlB,wBAAwB,EAAE,GAAGF,yBAAyB,CAAU;;AAElG,OAAO,MAAMqB,CAAC,GAAGxB,aAAa,CAACO,gBAAgB,CAACa,qBAAqB,CAAC,CAAC;;AAEvEI,CAAC,CAACC,IAAI,CAAC,mBAAmB,CAAC;AACxBC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAEP,qBAAqB,CAAC;AACxCQ,MAAM,CAAC,CAAAC,CAAC,KAAI1B,mCAAmC,CAAC,IAAI,EAAE0B,CAAC,CAACC,MAAM,CAAC,CAAC;AAChEF,MAAM,CAAC,CAAAC,CAAC,KAAIf,kCAAkC,CAACe,CAAC,CAACC,MAAM,CAAC,CAAC;AACzDH,OAAO,CAAC,cAAc,EAAEpB,mBAAmB,CAAC;AAC5CwB,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU;AACxD,CAAC;AACAK,iBAAiB,CAAC,CAAAH,CAAC;AAClBd,0DAA0D,CAACc,CAAC,EAAEA,CAAC,CAACJ,MAAM,CAACK,MAAM;AAC/E,CAAC;AACAG,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEI,YAAY,EAAEC,YAAY,EAAEC,SAAS,CAAC,CAAC,GAAGP,CAAC,CAACJ,MAAM;;EAElE;EACA,MAAMY,IAAI,GAAGxB,iBAAiB,CAAC,EAAEyB,OAAO,EAAE,CAAC,EAAEC,SAAS,EAAE,CAAC,EAAET,MAAM,EAAEU,aAAa,EAAE,IAAI,CAAC,CAAC,CAAC;;EAEzF,MAAMC,UAAgC,GAAG;IACvCX,MAAM;IACNY,SAAS,EAAE,IAAI;IACfL,IAAI;IACJM,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;EACpD,CAAC;EACD,MAAM,EAAEC,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY;IACZC,SAAS;IACTc,SAAS,EAAEd;EACb,CAAC;;EAED,MAAMe,KAA0B,GAAGhC,8BAA8B,CAAC,EAAE,EAAE;IACpE8B,OAAO;IACPG,MAAM,EAAElB,YAAY;IACpBO,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,CAACxB,MAAM,EAAEI,YAAY,EAAEC,YAAY,EAAEC,SAAS;EAC5D,CAAC,CAAC,CAACmB,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,CAAC,CAAC,KAAK;IACrC,OAAO;MACLC,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC;IACF,CAAC;EACH,CAAC,CAAC;EACF,MAAMG,cAAc,GAAG,CAAC,CAAC;EACzB,MAAMC,WAAW,GAAG,iBAAiB;EACrC,MAAMC,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;EAC7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC;;AAEJ1C,CAAC,CAACC,IAAI,CAAC,mBAAmB,CAAC;AACxBC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAEP,qBAAqB,CAAC;AACxCQ,MAAM,CAAC,CAAAC,CAAC,KAAIf,kCAAkC,CAACe,CAAC,CAACC,MAAM,CAAC,CAAC;AACzDH,OAAO,CAAC,cAAc,EAAEpB,mBAAmB,CAAC;AAC5CwB,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU,CAAC;AACpDA,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,CAAU;AAC7C,CAAC;AACAK,iBAAiB,CAAC,CAAAH,CAAC;AAClBd,0DAA0D,CAACc,CAAC,EAAEA,CAAC,CAACJ,MAAM,CAACK,MAAM;AAC/E,CAAC;AACAG,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEI,YAAY,EAAEC,YAAY,EAAE8B,YAAY,EAAE7B,SAAS,EAAE8B,MAAM,CAAC,CAAC,GAAGrC,CAAC,CAACJ,MAAM;;EAExF;EACA,MAAM,CAAC0C,KAAK,EAAEC,MAAM,CAAC,GAAGvD,iBAAiB,CAAC,EAAEyB,OAAO,EAAE,CAAC,EAAEC,SAAS,EAAE,CAAC,EAAET,MAAM,CAAC,CAAC,CAAC;;EAE/E,MAAMW,UAAgC,GAAG;IACvCX,MAAM;IACNO,IAAI,EAAE,EAAE8B,KAAK,EAAEC,MAAM,CAAC,CAAC;IACvBzB,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE,eAAe;IACjEuB,aAAa,EAAE;EACjB,CAAC;EACD,MAAM,EAAEtB,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY;IACZ8B,YAAY;IACZ7B,SAAS;IACTc,SAAS,EAAEd,SAAS;IACpBkC,YAAY,EAAElC;EAChB,CAAC;;EAED,MAAMe,KAA0B,GAAG9C,8BAA8B,CAAC,EAAE,EAAE;IACpE4C,OAAO;IACPG,MAAM,EAAElB,YAAY;IACpBO,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBa,MAAM,EAAE,IAAI;IACZZ,UAAU,EAAE,CAACxB,MAAM,EAAEI,YAAY,EAAEC,YAAY,EAAE8B,YAAY,EAAE7B,SAAS,EAAE8B,MAAM;EAClF,CAAC,CAAC,CAACX,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,EAAES,MAAM,CAAC,CAAC,KAAK;IAC7C,OAAO;MACLR,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC,cAAc;MACdS;IACF,CAAC;EACH,CAAC,CAAC;EACF,MAAMN,cAAc,GAAG,CAAC,CAAC;EACzB,MAAMC,WAAW,GAAG,iBAAiB;EACrC,MAAMC,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;EAC7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC;;AAEJ1C,CAAC,CAACC,IAAI,CAAC,mBAAmB,CAAC;AACxBC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAEP,qBAAqB,CAAC;AACxCQ,MAAM,CAAC,CAAAC,CAAC,KAAIf,kCAAkC,CAACe,CAAC,CAACC,MAAM,CAAC,CAAC;AACzDH,OAAO,CAAC,eAAe,EAAE,CAAC,IAAI,EAAE,MAAM,CAAU,CAAC;AACjDC,MAAM,CAAC,CAAAC,CAAC,KAAIX,0BAA0B,CAACW,CAAC,CAACC,MAAM,EAAED,CAAC,CAACW,aAAa,CAAC,CAAC;AAClEb,OAAO,CAAC,cAAc,EAAEf,uBAAuB,CAAC;AAChDgB,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACK,YAAY,KAAK,YAAY,IAAIL,CAAC,CAACW,aAAa,KAAK,IAAI,CAAC;AACxET,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU,CAAC;AACpDA,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,CAAU,CAAC;AACzCC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACW,aAAa,KAAK,MAAM,IAAIX,CAAC,CAACqC,MAAM,KAAK,IAAI;AAChE,CAAC;AACAlC,iBAAiB,CAAC,CAAAH,CAAC;AAClBd,0DAA0D,CAACc,CAAC,EAAEA,CAAC,CAACJ,MAAM,CAACK,MAAM;AAC/E,CAAC;AACAG,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM;IACJC,MAAM;IACNU,aAAa;IACbN,YAAY;IACZC,YAAY;IACZ8B,YAAY;IACZM,YAAY;IACZnC,SAAS;IACT8B;EACF,CAAC,GAAGrC,CAAC,CAACJ,MAAM;;EAEZ,MAAMY,IAAI,GAAGxB,iBAAiB,CAAC,EAAEyB,OAAO,EAAE,CAAC,EAAEC,SAAS,EAAE,CAAC,EAAET,MAAM,EAAEU,aAAa,CAAC,CAAC,CAAC;EACnF,MAAMC,UAAgC,GAAG;IACvCX,MAAM;IACNY,SAAS,EAAEF,aAAa,KAAK,IAAI,GAAG,IAAI,GAAG,IAAI;IAC/C,IAAIX,CAAC,CAAC2C,eAAe,IAAI,EAAEC,2BAA2B,EAAEjC,aAAa,CAAC,CAAC,CAAC;IACxEH,IAAI;IACJM,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE,eAAe;IACjE;IACAuB,aAAa,EAAE7B,aAAa,KAAK,IAAI,GAAG,CAAC,GAAG;EAC9C,CAAC;EACD,MAAM,EAAEO,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY;IACZ8B,YAAY;IACZM,YAAY;IACZnC,SAAS;IACTc,SAAS,EAAEd,SAAS;IACpBkC,YAAY,EAAElC;EAChB,CAAC;;EAED,MAAMkB,UAAU,GAAG;EACjBxB,MAAM;EACNU,aAAa;EACbN,YAAY;EACZC,YAAY;EACZ8B,YAAY;EACZM,YAAY;EACZnC,SAAS;EACT8B,MAAM,CACP;;EACD,MAAMf,KAA0B,GAAG;EACjCX,aAAa,KAAK,IAAI;EAClBlC,8BAA8B,CAAC,EAAE,EAAE;IACjC8C,MAAM,EAAElB,YAAkC;IAC1Ce,OAAO;IACPR,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBC;EACF,CAAC,CAAC;EACF3C,wBAAwB,CAAC,EAAE,EAAE;IAC3ByC,MAAM,EAAElB,YAAY;IACpBe,OAAO;IACPR,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBC;EACF,CAAC,CAAC;EACNC,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,EAAES,MAAM,CAAC,CAAC,KAAK;IAC5C,OAAO;MACLR,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC,cAAc;MACdS;IACF,CAAC;EACH,CAAC,CAAC;EACF,MAAMN,cAAc,GAAG;IACrBlB,SAAS,EAAEF;EACb,CAAC;EACD,MAAMqB,WAAW,GAAG7C,qCAAqC,CAACwB,aAAa,CAAE;EACzE,MAAMsB,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;EAC7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC;;AAEJ1C,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;AACtBC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAE1B,oBAAoB;AACvC;AAAA,CACC2B,MAAM,CAAC,CAAAC,CAAC,KAAI/B,oBAAoB,CAAC+B,CAAC,CAACC,MAAM,CAAC;AAC3C;AAAA,CACCF,MAAM,CAAC,CAAAC,CAAC,KAAI9B,wBAAwB,CAAC8B,CAAC,CAACC,MAAM,CAAC,CAAC;AAC/CC,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAEpB,mBAAmB,CAAC;AAC5CoB,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU,CAAC;AACpDA,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,CAAU;AAC7C,CAAC;AACAM,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEI,YAAY,EAAEC,YAAY,EAAE8B,YAAY,EAAE7B,SAAS,EAAE8B,MAAM,CAAC,CAAC,GAAGrC,CAAC,CAACJ,MAAM;;EAExF;EACA,MAAM,CAAC0C,KAAK,EAAEC,MAAM,CAAC,GAAGvD,iBAAiB,CAAC,EAAEyB,OAAO,EAAE,CAAC,EAAEC,SAAS,EAAE,CAAC,EAAET,MAAM,CAAC,CAAC,CAAC;EAC/E,MAAMW,UAAgC,GAAG;IACvCX,MAAM;IACNO,IAAI,EAAE,EAAE8B,KAAK,EAAEC,MAAM,CAAC,CAAC;IACvBzB,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE,eAAe;IACjEuB,aAAa,EAAE;EACjB,CAAC;EACD,MAAM,EAAEtB,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY;IACZ8B,YAAY;IACZ7B,SAAS;IACTc,SAAS,EAAEd,SAAS;IACpBkC,YAAY,EAAElC;EAChB,CAAC;;EAED,MAAMe,KAA0B,GAAG9C,8BAA8B,CAAC,EAAE,EAAE;IACpE4C,OAAO;IACPG,MAAM,EAAElB,YAAY;IACpBO,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBa,MAAM;IACNZ,UAAU,EAAE,CAACxB,MAAM,EAAEI,YAAY,EAAEC,YAAY,EAAE8B,YAAY,EAAE7B,SAAS,EAAE8B,MAAM;EAClF,CAAC,CAAC,CAACX,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,EAAES,MAAM,CAAC,CAAC,KAAK;IAC7C,OAAO;MACLR,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC,cAAc;MACdS;IACF,CAAC;EACH,CAAC,CAAC;;EAEF,MAAMN,cAAc,GAAG,CAAC,CAAC;EACzB,MAAMC,WAAW,GAAG,kBAAkB;EACtC,MAAMC,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;EAC7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC;;AAEJ1C,CAAC,CAACC,IAAI,CAAC,yBAAyB,CAAC;AAC9BC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAEP,qBAAqB,CAAC;AACxCQ,MAAM,CAAC,CAAAC,CAAC,KAAIf,kCAAkC,CAACe,CAAC,CAACC,MAAM,CAAC,CAAC;AACzDC,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAEpB,mBAAmB,CAAC;AAC5CoB,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAU,CAAC;AACrCA,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,cAAc,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC9EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU,CAAC;AACpDA,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,CAAU;AAC7C,CAAC;AACAK,iBAAiB,CAAC,CAAAH,CAAC;AAClBd,0DAA0D,CAACc,CAAC,EAAEA,CAAC,CAACJ,MAAM,CAACK,MAAM;AAC/E,CAAC;AACAG,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEI,YAAY,EAAEwC,CAAC,EAAEvC,YAAY,EAAE8B,YAAY,EAAE7B,SAAS,EAAE8B,MAAM,CAAC,CAAC,GAAGrC,CAAC,CAACJ,MAAM;;EAE3F;EACA,MAAM,CAAC0C,KAAK,EAAEC,MAAM,CAAC,GAAGvD,iBAAiB,CAAC,EAAEyB,OAAO,EAAE,CAAC,EAAEC,SAAS,EAAE,CAAC,EAAET,MAAM,CAAC,CAAC,CAAC;EAC/E,MAAM6C,kBAAkB,GAAG,CAAC;;EAE5B,MAAMlC,UAAgC,GAAG;IACvCX,MAAM;IACNO,IAAI,EAAE,EAAE8B,KAAK,EAAEC,MAAM,EAAEO,kBAAkB,CAAC,CAAC;IAC3ChC,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE,eAAe;IACjEuB,aAAa,EAAE;EACjB,CAAC;EACD,MAAM,EAAEtB,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY;IACZ8B,YAAY;IACZ7B,SAAS;IACTc,SAAS,EAAEd,SAAS;IACpBkC,YAAY,EAAElC;EAChB,CAAC;;EAED,MAAMe,KAA0B,GAAG9C,8BAA8B,CAAC,EAAE,EAAE;IACpE+C,MAAM,EAAElB,YAAY;IACpBe,OAAO;IACPR,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBuB,UAAU,EAAE,EAAEC,GAAG,EAAE7B,OAAO,CAAC2B,kBAAkB,EAAEG,IAAI,EAAEJ,CAAC,CAAC,CAAC;IACxDR,MAAM;IACNZ,UAAU,EAAE,CAACxB,MAAM,EAAEI,YAAY,EAAEwC,CAAC,EAAEvC,YAAY,EAAE8B,YAAY,EAAE7B,SAAS,EAAE8B,MAAM;EACrF,CAAC,CAAC,CAACX,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,EAAEmB,UAAU,EAAEV,MAAM,CAAC,CAAC,KAAK;IACzD,OAAO;MACLR,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC,cAAc;MACdmB,UAAU;MACVG,cAAc,EAAEL,CAAC,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG;MACvCR;IACF,CAAC;EACH,CAAC,CAAC;EACF,MAAML,WAAW,GAAG,uBAAuB;EAC3C,MAAMD,cAAc,GAAG,CAAC,CAAC;EACzB,MAAME,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;EAC7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC;;AAEJ1C,CAAC,CAACC,IAAI,CAAC,yBAAyB,CAAC;AAC9BC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAEP,qBAAqB,CAAC;AACxCQ,MAAM,CAAC,CAAAC,CAAC,KAAIf,kCAAkC,CAACe,CAAC,CAACC,MAAM,CAAC,CAAC;AACzDC,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAEf,uBAAuB,CAAC;AAChDe,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAU,CAAC;AACrCA,OAAO,CAAC,aAAa,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC7EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU;AACxD,CAAC;AACAK,iBAAiB,CAAC,CAAAH,CAAC,KAAI;EACtBd,0DAA0D,CAACc,CAAC,EAAEA,CAAC,CAACJ,MAAM,CAACK,MAAM,CAAC;EAC9ED,CAAC,CAACmD,sCAAsC,CAAC,YAAY,CAAC;AACxD,CAAC,CAAC;AACD/C,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEI,YAAY,EAAEwC,CAAC,EAAEO,WAAW,EAAE7C,SAAS,CAAC,CAAC,GAAGP,CAAC,CAACJ,MAAM;;EAEpE,MAAMe,aAAsC,GAAG,YAAY;EAC3D,MAAMH,IAAI,GAAGxB,iBAAiB,CAAC;IAC7ByB,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,CAAC;IACZT,MAAM;IACNU;EACF,CAAC,CAAC;EACF,MAAMC,UAAgC,GAAG;IACvCX,MAAM;IACNO,IAAI;IACJM,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE,eAAe;IACjE;IACAuB,aAAa,EAAE;EACjB,CAAC;EACD,MAAM,EAAEtB,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY,EAAE8C,WAAW;IACzBhB,YAAY,EAAEgB,WAAW;IACzBV,YAAY,EAAEU,WAAW;IACzB7C,SAAS;IACTc,SAAS,EAAEd,SAAS;IACpBkC,YAAY,EAAElC;EAChB,CAAC;;EAED,MAAMe,KAA0B,GAAGxC,wBAAwB,CAAC,EAAE,EAAE;IAC9DyC,MAAM,EAAElB,YAAY;IACpBe,OAAO;IACPR,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBuB,UAAU,EAAE,EAAEC,GAAG,EAAE7B,OAAO,CAAC2B,kBAAkB,GAAG,CAAC,EAAEG,IAAI,EAAEJ,CAAC,CAAC,CAAC;IAC5DpB,UAAU,EAAE,CAACxB,MAAM,EAAEU,aAAa,EAAEkC,CAAC,EAAExC,YAAY,EAAE+C,WAAW,EAAE7C,SAAS;EAC7E,CAAC,CAAC,CAACmB,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,EAAEmB,UAAU,CAAC,CAAC,KAAK;IACjD,OAAO;MACLlB,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC,cAAc;MACdmB,UAAU;MACVG,cAAc,EAAEL,CAAC,KAAK,KAAK,GAAG,GAAG,GAAG;IACtC,CAAC;EACH,CAAC,CAAC;EACF,MAAMd,cAAc,GAAG;IACrBlB,SAAS,EAAEF;EACb,CAAC;EACD,MAAMqB,WAAW,GAAG7C,qCAAqC,CAACwB,aAAa,CAAC;EACxE,MAAMsB,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;EAC7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC;;AAEJ1C,CAAC,CAACC,IAAI,CAAC,iBAAiB,CAAC;AACtBC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAE1B,oBAAoB;AACvC;AAAA,CACC2B,MAAM,CAAC,CAAAC,CAAC,KAAI/B,oBAAoB,CAAC+B,CAAC,CAACC,MAAM,CAAC;AAC3C;AAAA,CACCF,MAAM,CAAC,CAAAC,CAAC,KAAI9B,wBAAwB,CAAC8B,CAAC,CAACC,MAAM,CAAC,CAAC;AAC/CoD,iBAAiB,CAAC;AACjB,EAAE1C,aAAa,EAAE,MAAM,CAAC,CAAC;AACzB,EAAEA,aAAa,EAAE,YAAY,EAAEkC,CAAC,EAAE,KAAK,CAAC,CAAC;AACzC,EAAElC,aAAa,EAAE,YAAY,EAAEkC,CAAC,EAAE,KAAK,CAAC,CAAC;AACjC,CAAC;AACV3C,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAEf,uBAAuB,CAAC;AAChDe,OAAO,CAAC,aAAa,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC7EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU;AACxD,CAAC;AACAK,iBAAiB,CAAC,CAAAH,CAAC,KAAI;EACtBA,CAAC,CAACmD,sCAAsC,CAACnD,CAAC,CAACJ,MAAM,CAACe,aAAa,CAAC;AAClE,CAAC,CAAC;AACDP,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEU,aAAa,EAAEN,YAAY,EAAEwC,CAAC,EAAEO,WAAW,EAAE7C,SAAS,CAAC,CAAC,GAAGP,CAAC,CAACJ,MAAM;;EAEnF,MAAMY,IAAI,GAAGxB,iBAAiB,CAAC;IAC7ByB,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,CAAC;IACZT,MAAM;IACNU;EACF,CAAC,CAAC;EACF,MAAMC,UAAgC,GAAG;IACvCX,MAAM;IACNO,IAAI;IACJM,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE,eAAe;IACjE;IACAuB,aAAa,EAAE,CAAC;IAChB,IAAIxC,CAAC,CAAC2C,eAAe,IAAI,EAAEC,2BAA2B,EAAEjC,aAAa,CAAC,CAAC;EACzE,CAAC;EACD,MAAM,EAAEO,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY,EAAE8C,WAAW;IACzBhB,YAAY,EAAEgB,WAAW;IACzBV,YAAY,EAAEU,WAAW;IACzB7C,SAAS;IACTc,SAAS,EAAEd,SAAS;IACpBkC,YAAY,EAAElC;EAChB,CAAC;;EAED,MAAMe,KAA0B,GAAGxC,wBAAwB,CAAC,EAAE,EAAE;IAC9DyC,MAAM,EAAElB,YAAY;IACpBe,OAAO;IACPR,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBuB,UAAU,EAAEF,CAAC,GAAG,EAAEG,GAAG,EAAE7B,OAAO,CAAC2B,kBAAkB,GAAG,CAAC,EAAEG,IAAI,EAAEJ,CAAC,CAAC,CAAC,GAAGS,SAAS;IAC5E7B,UAAU,EAAE,CAACxB,MAAM,EAAEU,aAAa,EAAEN,YAAY,EAAE+C,WAAW,EAAE7C,SAAS;EAC1E,CAAC,CAAC,CAACmB,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,EAAEmB,UAAU,CAAC,CAAC,KAAK;IACjD,OAAO;MACLlB,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC,cAAc;MACdmB,UAAU;MACVG,cAAc,EAAEL,CAAC,GAAIA,CAAC,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG,GAAIS;IAClD,CAAC;EACH,CAAC,CAAC;EACF,MAAMvB,cAAc,GAAG;IACrBlB,SAAS,EAAEF;EACb,CAAC;EACD,MAAMqB,WAAW;EACfrB,aAAa,KAAK,MAAM,GAAG,oBAAoB,GAAG,0BAA0B;EAC9E,MAAMsB,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;;EAE7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC;;AAEJ1C,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;AAC5BC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAE1B,oBAAoB;AACvC;AAAA,CACC2B,MAAM,CAAC,CAAAC,CAAC,KAAI/B,oBAAoB,CAAC+B,CAAC,CAACC,MAAM,CAAC;AAC3C;AAAA,CACCF,MAAM,CAAC,CAAAC,CAAC,KAAI9B,wBAAwB,CAAC8B,CAAC,CAACC,MAAM,CAAC,CAAC;AAC/CC,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAEpB,mBAAmB,CAAC;AAC5CoB,OAAO,CAAC,aAAa,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC7EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU,CAAC;AACpDA,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAU,CAAC;AACrCA,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAU,CAAC;AACrCA,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,IAAI,CAAU;AAC7C,CAAC;AACAM,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEI,YAAY,EAAE+C,WAAW,EAAE7C,SAAS,EAAEsC,CAAC,EAAEU,CAAC,EAAElB,MAAM,CAAC,CAAC,GAAGrC,CAAC,CAACJ,MAAM;;EAE/E;EACA,MAAM,CAAC0C,KAAK,EAAEC,MAAM,CAAC,GAAGvD,iBAAiB,CAAC,EAAEyB,OAAO,EAAE,CAAC,EAAEC,SAAS,EAAE,CAAC,EAAET,MAAM,CAAC,CAAC,CAAC;EAC/E,MAAMW,UAAgC,GAAG;IACvCX,MAAM;IACNO,IAAI,EAAE,EAAE8B,KAAK,EAAEC,MAAM,CAAC,CAAC;IACvBzB,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE,eAAe;IACjEuB,aAAa,EAAE,CAAC;IAChB,IAAIxC,CAAC,CAAC2C,eAAe,IAAI,EAAEC,2BAA2B,EAAE,UAAU,CAAC,CAAC;EACtE,CAAC;EACD,MAAM,EAAE1B,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY,EAAE8C,WAAW;IACzBhB,YAAY,EAAEgB,WAAW;IACzB7C,SAAS;IACTc,SAAS,EAAEd,SAAS;IACpBkC,YAAY,EAAElC;EAChB,CAAC;;EAED,MAAMe,KAA0B,GAAG9C,8BAA8B,CAAC,EAAE,EAAE;IACpE+C,MAAM,EAAElB,YAAY;IACpBe,OAAO;IACPR,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBuB,UAAU,EAAE,EAAEC,GAAG,EAAE7B,OAAO,CAAC2B,kBAAkB,EAAEG,IAAI,EAAEJ,CAAC,CAAC,CAAC;IACxDR,MAAM;IACNZ,UAAU,EAAE,CAACxB,MAAM,EAAEI,YAAY,EAAE+C,WAAW,EAAE7C,SAAS,EAAEgD,CAAC,EAAEV,CAAC,EAAER,MAAM;EACzE,CAAC,CAAC,CAACX,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,EAAEmB,UAAU,EAAEV,MAAM,CAAC,CAAC,KAAK;IACzD,OAAO;MACLR,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC,cAAc;MACdmB,UAAU;MACVG,cAAc,EAAEL,CAAC,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG;MACvCR;IACF,CAAC;EACH,CAAC,CAAC;EACF,MAAML,WAAW,GAAG,wBAAwB;EAC5C,MAAMD,cAAwC,GAAG,EAAElB,SAAS,EAAE,UAAU,CAAC,CAAC;EAC1E,MAAMoB,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;EAC7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC;;AAEJ1C,CAAC,CAACC,IAAI,CAAC,uBAAuB,CAAC;AAC5BC,OAAO,CAAC,2CAA2C,CAAC;AACpDC,IAAI;EACF;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,CAAC;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,QAAQ,EAAE1B,oBAAoB;AACvC;AAAA,CACC2B,MAAM,CAAC,CAAAC,CAAC,KAAI/B,oBAAoB,CAAC+B,CAAC,CAACC,MAAM,CAAC;AAC3C;AAAA,CACCF,MAAM,CAAC,CAAAC,CAAC,KAAI9B,wBAAwB,CAAC8B,CAAC,CAACC,MAAM,CAAC,CAAC;AAC/CC,aAAa,CAAC,CAAC;AACfJ,OAAO,CAAC,cAAc,EAAEf,uBAAuB,CAAC;AAChDe,OAAO,CAAC,aAAa,EAAE,CAAC,eAAe,EAAE,QAAQ,EAAE,eAAe,CAAU,CAAC;AAC7EA,OAAO,CAAC,WAAW,EAAE,CAAC,SAAS,EAAE,QAAQ,CAAU,CAAC;AACpDA,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,KAAK,CAAU;AACzC,CAAC;AACAK,iBAAiB,CAAC,CAAAH,CAAC,KAAI;EACtBA,CAAC,CAACmD,sCAAsC,CAAC,YAAY,CAAC;AACxD,CAAC,CAAC;AACD/C,EAAE,CAAC,OAAMJ,CAAC,KAAI;EACb,MAAM,EAAEC,MAAM,EAAEI,YAAY,EAAEwC,CAAC,EAAEO,WAAW,EAAE7C,SAAS,CAAC,CAAC,GAAGP,CAAC,CAACJ,MAAM;;EAEpE,MAAMe,aAAsC,GAAG,YAAY;EAC3D,MAAMH,IAAI,GAAGxB,iBAAiB,CAAC;IAC7ByB,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,CAAC;IACZT,MAAM;IACNU;EACF,CAAC,CAAC;EACF,MAAMC,UAAgC,GAAG;IACvCX,MAAM;IACNO,IAAI;IACJM,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE,eAAe;IACjE;IACAuB,aAAa,EAAE,CAAC;IAChB,IAAIxC,CAAC,CAAC2C,eAAe,IAAI,EAAEC,2BAA2B,EAAEjC,aAAa,CAAC,CAAC;EACzE,CAAC;EACD,MAAM,EAAEO,MAAM,EAAEC,OAAO,CAAC,CAAC,GAAG,MAAMtC,uCAAuC,CAACmB,CAAC,EAAEY,UAAU,CAAC;EACxF,MAAMQ,OAA6B,GAAG;IACpCd,YAAY,EAAE8C,WAAW;IACzBhB,YAAY,EAAEgB,WAAW;IACzBV,YAAY,EAAEU,WAAW;IACzB7C,SAAS;IACTc,SAAS,EAAEd,SAAS;IACpBkC,YAAY,EAAElC;EAChB,CAAC;;EAED,MAAMe,KAA0B,GAAGxC,wBAAwB,CAAC,EAAE,EAAE;IAC9DyC,MAAM,EAAElB,YAAY;IACpBe,OAAO;IACPR,UAAU;IACVY,WAAW,EAAE,IAAI;IACjBuB,UAAU,EAAEF,CAAC,GAAG,EAAEG,GAAG,EAAE7B,OAAO,CAAC2B,kBAAkB,GAAG,CAAC,EAAEG,IAAI,EAAEJ,CAAC,CAAC,CAAC,GAAGS,SAAS;IAC5E7B,UAAU,EAAE,CAACxB,MAAM,EAAEU,aAAa,EAAEN,YAAY,EAAE+C,WAAW,EAAE7C,SAAS;EAC1E,CAAC,CAAC,CAACmB,GAAG,CAAC,CAAC,EAAEC,MAAM,EAAEC,cAAc,EAAEmB,UAAU,CAAC,CAAC,KAAK;IACjD,OAAO;MACLlB,OAAO,EAAE,eAAe;MACxBC,SAAS,EAAE,GAAG;MACdH,MAAM;MACNC,cAAc;MACdmB,UAAU;MACVG,cAAc,EAAEL,CAAC,GAAIA,CAAC,KAAK,KAAK,GAAG,GAAG,GAAG,GAAG,GAAIS;IAClD,CAAC;EACH,CAAC,CAAC;EACF,MAAMvB,cAAc,GAAG;IACrBlB,SAAS,EAAEF;EACb,CAAC;EACD,MAAMqB,WAAW,GAAG,0BAA0B;EAC9C,MAAMC,OAAO,GAAG,MAAMtD,cAAc,CAACqB,CAAC,EAAEmB,OAAO,EAAEY,cAAc,EAAEC,WAAW,EAAEZ,OAAO,EAAEE,KAAK,CAAC;;EAE7F,MAAMY,GAAG,GAAG,MAAMtD,gBAAgB;IAChCoB,CAAC;IACD,EAAEkB,MAAM,EAAEN,UAAU,EAAEmB,cAAc,CAAC,CAAC;IACtCC,WAAW;IACXZ,OAAO;IACPE,KAAK;IACLW;EACF,CAAC;EACDjC,CAAC,CAACmC,QAAQ,CAACD,GAAG,CAAC;AACjB,CAAC,CAAC"}