{"version":3,"file":"textureSampleGrad.spec.js","names":["description","makeTestGroup","kCompressedTextureFormats","kEncodableTextureFormats","kShaderStages","appendComponentTypeForFormatToTextureType","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","generateSamplePointsCube","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","getTextureTypeForTextureViewDimension","isPotentiallyFilterableAndFillable","isSupportedViewFormatCombo","kCubeSamplePointMethods","kSamplePointMethods","skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable","WGSLTextureSampleTest","kTestableColorFormats","g","test","specURL","desc","params","u","combine","filter","t","format","beginSubcases","beforeAllSubcases","fn","stage","samplePoints","addressModeU","addressModeV","minFilter","offset","width","height","minSize","minBlocks","descriptor","size","mipLevelCount","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","sampler","magFilter","mipmapFilter","calls","method","grad","hashInputs","map","coords","ddx","ddy","builtin","coordType","textureType","viewDescriptor","results","res","expectOK","viewDimension","addressModeW","dimension","isCompatibility","textureBindingViewDimension","A","depthOrArrayLayers","arrayIndex","num","type","arrayIndexType","skipIfTextureViewDimensionNotSupported","addressMode"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleGrad.spec.ts"],"sourcesContent":["export const description = `\nSamples a texture using explicit gradients.\n\n- TODO: test cube maps with more than one mip level.\n- TODO: Test un-encodable formats.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kCompressedTextureFormats, kEncodableTextureFormats } from '../../../../../format_info.js';\nimport { kShaderStages } from '../../../../validation/decl/util.js';\n\nimport {\n  appendComponentTypeForFormatToTextureType,\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateSamplePointsCube,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  getTextureTypeForTextureViewDimension,\n  isPotentiallyFilterableAndFillable,\n  isSupportedViewFormatCombo,\n  kCubeSamplePointMethods,\n  kSamplePointMethods,\n  SamplePointMethods,\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable,\n  TextureCall,\n  vec2,\n  vec3,\n  WGSLTextureSampleTest,\n} from './texture_utils.js';\n\nconst kTestableColorFormats = [...kEncodableTextureFormats, ...kCompressedTextureFormats] as const;\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nfn textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShaderStages)\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      mipLevelCount: 3,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      grad: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, offset, ddx, ddy }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        offset,\n      };\n    });\n    const textureType = appendComponentTypeForFormatToTextureType('texture_2d', format);\n    const viewDescriptor = {};\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nfn textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShaderStages)\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('viewDimension', ['3d', 'cube'] as const)\n      .filter(t => isSupportedViewFormatCombo(t.format, t.viewDimension))\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .filter(t => t.samplePoints !== 'cube-edges' || t.viewDimension !== '3d')\n      .beginSubcases()\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeW', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n      .filter(t => t.viewDimension !== 'cube' || t.offset !== true)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const {\n      format,\n      viewDimension,\n      stage,\n      samplePoints,\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      offset,\n    } = t.params;\n\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: viewDimension === '3d' ? '3d' : '2d',\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n      mipLevelCount: viewDimension === '3d' ? 3 : 1,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      magFilter: minFilter,\n    };\n\n    const hashInputs = [\n      format,\n      viewDimension,\n      samplePoints,\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      offset,\n    ];\n    const calls: TextureCall<vec3>[] = (\n      viewDimension === '3d'\n        ? generateTextureBuiltinInputs3D(50, {\n            method: samplePoints as SamplePointMethods,\n            sampler,\n            descriptor,\n            grad: true,\n            offset,\n            hashInputs,\n          })\n        : generateSamplePointsCube(50, {\n            method: samplePoints,\n            sampler,\n            descriptor,\n            grad: true,\n            hashInputs,\n          })\n    ).map(({ coords, offset, ddx, ddy }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        offset,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension)!;\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShaderStages)\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const { format, stage, samplePoints, A, addressModeU, addressModeV, minFilter, offset } =\n      t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const depthOrArrayLayers = 4;\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height, depthOrArrayLayers },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      grad: true,\n      offset,\n      hashInputs: [stage, format, samplePoints, A, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, ddx, ddy, arrayIndex, offset }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        offset,\n      };\n    });\n    const textureType = 'texture_2d_array<f32>';\n    const viewDescriptor = {};\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleGrad(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: C, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('stage', kShaderStages)\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n  )\n  .beforeAllSubcases(t => {\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n  })\n  .fn(async t => {\n    const { format, stage, samplePoints, A, addressMode, minFilter } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({\n      minSize: 32,\n      minBlocks: 4,\n      format,\n      viewDimension,\n    });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n      mipLevelCount: 1,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      grad: true,\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      hashInputs: [stage, format, viewDimension, A, samplePoints, addressMode, minFilter],\n    }).map(({ coords, ddx, ddy, arrayIndex }) => {\n      return {\n        builtin: 'textureSampleGrad',\n        coordType: 'f',\n        coords,\n        ddx,\n        ddy,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}