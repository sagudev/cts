{"version":3,"file":"textureSampleBias.spec.js","names":["description","makeTestGroup","kCompressedTextureFormats","kEncodableTextureFormats","TextureTestMixin","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","kSamplePointMethods","doTextureCalls","checkCallResults","createTextureWithRandomDataAndGetTexels","generateSamplePointsCube","kCubeSamplePointMethods","chooseTextureSize","isPotentiallyFilterableAndFillable","skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable","getTextureTypeForTextureViewDimension","WGSLTextureSampleTest","isSupportedViewFormatCombo","kTestableColorFormats","g","test","specURL","desc","params","u","combine","filter","t","format","beginSubcases","beforeAllSubcases","fn","samplePoints","addressModeU","addressModeV","minFilter","offset","width","height","minSize","minBlocks","descriptor","size","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","mipLevelCount","texels","texture","sampler","magFilter","mipmapFilter","calls","method","bias","hashInputs","map","coords","derivativeMult","builtin","coordType","viewDescriptor","textureType","results","res","expectOK","viewDimension","addressModeW","dimension","isCompatibility","textureBindingViewDimension","A","depthOrArrayLayers","arrayIndex","num","type","arrayIndexType","skipIfTextureViewDimensionNotSupported","addressMode"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleBias.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'textureSampleBias' builtin function\n\nSamples a texture with a bias to the mip level.\n\n- TODO: test cube maps with more than one mip level.\n- TODO: Test un-encodable formats.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kCompressedTextureFormats, kEncodableTextureFormats } from '../../../../../format_info.js';\nimport { TextureTestMixin } from '../../../../../gpu_test.js';\n\nimport {\n  vec2,\n  vec3,\n  TextureCall,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  kSamplePointMethods,\n  doTextureCalls,\n  checkCallResults,\n  createTextureWithRandomDataAndGetTexels,\n  generateSamplePointsCube,\n  kCubeSamplePointMethods,\n  SamplePointMethods,\n  chooseTextureSize,\n  isPotentiallyFilterableAndFillable,\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable,\n  getTextureTypeForTextureViewDimension,\n  WGSLTextureSampleTest,\n  isSupportedViewFormatCombo,\n} from './texture_utils.js';\n\nconst kTestableColorFormats = [...kEncodableTextureFormats, ...kCompressedTextureFormats] as const;\n\nexport const g = makeTestGroup(TextureTestMixin(WGSLTextureSampleTest));\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nfn textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('samplePoints', kSamplePointMethods)\n      .beginSubcases()\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const { format, samplePoints, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      sampler,\n      method: samplePoints,\n      descriptor,\n      bias: true,\n      offset,\n      hashInputs: [format, samplePoints, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, derivativeMult, offset, bias }) => {\n      return {\n        builtin: 'textureSampleBias',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        bias,\n        offset,\n      };\n    });\n    const viewDescriptor = {};\n    const textureType = 'texture_2d<f32>';\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nfn textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleBias(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .combine('viewDimension', ['3d', 'cube'] as const)\n      .filter(t => isSupportedViewFormatCombo(t.format, t.viewDimension))\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .filter(t => t.samplePoints !== 'cube-edges' || t.viewDimension !== '3d')\n      .beginSubcases()\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeW', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n      .filter(t => t.viewDimension !== 'cube' || t.offset !== true)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const {\n      format,\n      viewDimension,\n      samplePoints,\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      offset,\n    } = t.params;\n\n    const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      dimension: viewDimension === '3d' ? '3d' : '2d',\n      ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n      size,\n      // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n      mipLevelCount: viewDimension === '3d' ? 3 : 1,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      magFilter: minFilter,\n    };\n\n    const hashInputs = [\n      format,\n      viewDimension,\n      samplePoints,\n      addressModeU,\n      addressModeV,\n      addressModeW,\n      minFilter,\n      offset,\n    ];\n    const calls: TextureCall<vec3>[] = (\n      viewDimension === '3d'\n        ? generateTextureBuiltinInputs3D(50, {\n            method: samplePoints as SamplePointMethods,\n            sampler,\n            descriptor,\n            bias: true,\n            offset,\n            hashInputs,\n          })\n        : generateSamplePointsCube(50, {\n            method: samplePoints,\n            sampler,\n            descriptor,\n            bias: true,\n            hashInputs,\n          })\n    ).map(({ coords, derivativeMult, offset, bias }) => {\n      return {\n        builtin: 'textureSampleBias',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        bias,\n        offset,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension)!;\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('arrayed_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nA: i32, u32\n\nfn textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: A, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: A, bias: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index to sample.\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressModeU', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('addressModeV', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n      .combine('offset', [false, true] as const)\n  )\n  .beforeAllSubcases(t =>\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n  )\n  .fn(async t => {\n    const { format, samplePoints, A, addressModeU, addressModeV, minFilter, offset } = t.params;\n\n    // We want at least 4 blocks or something wide enough for 3 mip levels.\n    const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n    const depthOrArrayLayers = 4;\n\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size: { width, height, depthOrArrayLayers },\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      mipLevelCount: 3,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU,\n      addressModeV,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec2>[] = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n      bias: true,\n      offset,\n      hashInputs: [format, samplePoints, A, addressModeU, addressModeV, minFilter, offset],\n    }).map(({ coords, derivativeMult, arrayIndex, bias, offset }) => {\n      return {\n        builtin: 'textureSampleBias',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        bias,\n        offset,\n      };\n    });\n    const textureType = 'texture_2d_array<f32>';\n    const viewDescriptor = {};\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n\ng.test('arrayed_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nA: i32, u32\n\nfn textureSampleBias(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: A, bias: f32) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index to sample.\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kTestableColorFormats)\n      .filter(t => isPotentiallyFilterableAndFillable(t.format))\n      .beginSubcases()\n      .combine('samplePoints', kCubeSamplePointMethods)\n      .combine('A', ['i32', 'u32'] as const)\n      .combine('addressMode', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('minFilter', ['nearest', 'linear'] as const)\n  )\n  .beforeAllSubcases(t => {\n    skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n    t.skipIfTextureViewDimensionNotSupported('cube-array');\n  })\n  .fn(async t => {\n    const { format, samplePoints, A, addressMode, minFilter } = t.params;\n\n    const viewDimension: GPUTextureViewDimension = 'cube-array';\n    const size = chooseTextureSize({\n      minSize: 32,\n      minBlocks: 4,\n      format,\n      viewDimension,\n    });\n    const descriptor: GPUTextureDescriptor = {\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n      mipLevelCount: 1,\n    };\n    const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n    const sampler: GPUSamplerDescriptor = {\n      addressModeU: addressMode,\n      addressModeV: addressMode,\n      addressModeW: addressMode,\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter,\n    };\n\n    const calls: TextureCall<vec3>[] = generateSamplePointsCube(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      bias: true,\n      arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n      hashInputs: [format, viewDimension, A, samplePoints, addressMode, minFilter],\n    }).map(({ coords, derivativeMult, arrayIndex, bias }) => {\n      return {\n        builtin: 'textureSampleBias',\n        coordType: 'f',\n        coords,\n        derivativeMult,\n        arrayIndex,\n        arrayIndexType: A === 'i32' ? 'i' : 'u',\n        bias,\n      };\n    });\n    const viewDescriptor = {\n      dimension: viewDimension,\n    };\n    const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n    const results = await doTextureCalls(t, texture, viewDescriptor, textureType, sampler, calls);\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results\n    );\n    t.expectOK(res);\n  });\n"],"mappings":"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"}